#
# Default jnetpcap configuartion
#
# * subdir is the subdirectory in user's home directory where jnetpcap files
#       are stored.
# * var namespace allows global variables to be set and expanded in property 
#       values when $var_name$ is encountered
# * search.path sets up a default search path for resources. When a resource
#       is requested, this is the search path that is used.
#   +) File() uses FilesystemSearch class to look for $name$ resource
#   +) Classpath() uses ClasspathSearch class to look in CLASSPATH
#   +) URL() uses URLSearch class open a connection to the URL
#
# Property expansion, seems a little complex, but it isn't. Variables are 
# expanded first, then properties. Variables are between $ and properties are
# between @ signs. Expansion happens at the time the property is retrieved, not
# when its read from config file. Example:
#
#       File(@user.home@/@$resources$.subdir@/$name$)
#
# First,  variables are expanded $resources$ expands to resources
# $name$ expands to name of the resource we're looking for, lets say we are
# looking for config.properties. This is what we end up with so far:
#
#  File(@user.home@/@resources.subdir@/config.properties)
#
# Second, properties are expanded recursively, so on first expansion we get:
#
#  File(/home/guest/@config.dir@/config.properties)
#
# @resources.subdir@ references @config.dir@ property, so
# we expand again: 
#
#  File(/home/guest/.jnp/config.properties)
#
# And that is the what is passed to FilesystemSearch class. If any of the
# properties or variables are not defined, the expansion fails immediately and
# the search is aborted immediately. If there are more search path elements,
# then the next one is tried until the end. The single quotes, escapes any
# expansions, so that config search engine can read in its path elements from
# this property. Therefore it is possible for other search path properites
# just simply reference this main search property as a base property.
#
# The order of the property declaration is unimportant. The property expansion 
# happens every time the property is used, not when it read.
#
config.name = config.properties
logger.name = logger.properties
config.bootstrap.search.path = \
	'File(@{config.file})' \
    'File(@{user.dir}/${name})' \
	'File(@{config.dir}/${name})' \
	'File(@{home.dir}/${name})' \
    'Classpath(resources/${name})' \
    'Classpath(${name})'
    
logger.search.path = @{config.bootstrap.search.path}

subdir        = .jnp
home.dir      = @{user.home}/@{subdir}
home.mkdir    = false
config.subdir = @{subdir}

#
# When searching for main jNetPcap directory
# 1) User explicitely defined home
# 2) In current directory look for .jnp
# 3) In user's home directory loop for .jnp
# 4) In temporary directory loop for .jnp
home.search.path = \
	'File(@{home.dir})' \
	'File(@{user.dir}/@{subdir})' \
	'File(@{user.home}/@{subdir})' \
	'File(@{java.io.tmpdir}/@{subdir})'

search.path = \
    'File(@{user.home}/@{resources.subdir}/${name})' \
	'File(@{${name}})' \
    'File(@{user.dir}/${name})' \
    'File(@{java.io.tmpdir}/${name})' \
    'Classpath(resources/${name})' \
    'Classpath(${name})' \
    'URL(@{resources.${name}.url})'

# Resolver properties, $resolver$ = resolver
# Configs for address to name resolvers
# * timeout is in millis
#   +) 0 means don't cache
#   +) -1 means never timeout
# * maxentries and backoff control size of resolver DB
#   +) after maxentries is reached, backoff is used to removed oldest entries
#   +) back off is percentage of the current size
# * save if set to true will save the resolver DB to file upon exit
# 
var.resolver                                      = resolver
resolver.suffix                      = .resolver
resolver.subdir                      = @{subdir}
resolver.home                        = @{home.dir}
resolver.home.mkdir                  = @{home.mkdir}
resolver.home.search.path            = @{home.search.path}
resolver.save                        = true
resolver.timeout.positive            = 1400000000
resolver.timeout.negative            = 9000000
resolver.maxentries                  = 1000
resolver.backoff                     = 10
resolver.OUI_PREFIX.timeout.positive = -1
resolver.OUI_PREFIX.maxentries       = 15000
resolver.OUI_PREFIX.save             = true
resolver.OUI_PREFIX.db.url           = http://standards.ieee.org/regauth/oui/oui.txt
resolver.OUI_PREFIX.db.download      = false

resolver.search.path  = \
	'File(@{resolver.${name}})' \
    'File(@{resolver.dir}/${name}@{resolver.suffix})' \
    'File(@{user.dir}/${name}@{resolver.suffix})' \
    'File(@{user.home}/@{resolver.subdir}/${name}@{resolver.suffix})' \
    'File(@{java.io.tmpdir}/${name}@{resolver.suffix})' \
    'Classpath(${name}@{resolver.suffix})'

